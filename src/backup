var app = angular.module('oden-app', ['ngRoute']);
var fileHandler = require('./src/fileHandler.js');

app.config(function($routeProvider) {
  $routeProvider
    .when('/', {
      templateUrl: 'html/home.html'
    })

    .when('/categoryConfig', {
      templateUrl: 'html/categoryConfig.html'
    })

    .when('/rssConfig', {
      templateUrl: 'html/rssConfig.html'
    })

    .when('/scrape', {
      templateUrl: 'html/scrape.html'
    })

    .when('/settings', {
      templateUrl: 'html/settings.html'
    })
});

app.controller('rssConfigCtrl', function($scope) {
  $scope.vmRss = null;

  $scope.response = fileHandler.parseJson('./json/rss.json');
  $scope.isResponseEmpty = true;

  $scope.checkResponse = function() {
    if ($scope.response === undefined || $scope.response.length == 0) {
      $scope.isResponseEmpty = true;
    } else {
      $scope.isResponseEmpty = false;
    }
    return $scope.isResponseEmpty;
  };

  $scope.handleAddDivClick = function() {
    console.log('handleAddDivClick called');
    var input = $scope.vmRss;
    if (input != "") {

      let rssArray = fileHandler.parseJson('./json/rss.json');
      let parsedInput = input.split(",");
      let concatArray = rssArray.concat(parsedInput);
      let stringedArray = JSON.stringify(concatArray);

      fileHandler.writeJson('./json/rss.json', stringedArray);

      $scope.response = fileHandler.parseJson('./json/rss.json');
      $scope.checkResponse();
    } else {
      alert("You didn't type a link.");
    }
  };

  $scope.delete = function(index) {
    let rssArray = fileHandler.parseJson('./json/rss.json');
    rssArray.splice(index, 1);
    let stringedArray = JSON.stringify(rssArray);

    fileHandler.writeJson('./json/rss.json', stringedArray);

    $scope.response = fileHandler.parseJson('./json/rss.json');
    $scope.checkResponse();
  };
});

app.controller('navBarCtrl', function($scope, $location) {
  $scope.isActive = function(viewLocation) {
    return viewLocation === $location.path();
  };
});

app.controller('scrapeCtrl', function($scope, $http) {
  $scope.handleScrapeClick = function() {
    console.log("Scrape initialized");
    $scope.scrapeInfo = "Scrape initialized";

    var xmlParser = new DOMParser();
    let jsonPromises = [];
    jsonPromises.push(fileHandler.parseJsonPromise('./json/rss.json'));
    jsonPromises.push(fileHandler.parseJsonPromise('./json/category.json'));

    Promise.all(jsonPromises).then(returnValues => {
      let rssArray = returnValues[0];
      let categoryObj = returnValues[1];
      initScrape(rssArray, categoryObj);
    }).catch(error => {
      console.log(error);
    });

    async function initScrape(rssArray, categoryObj) {
      let scrapePromises = [];

      for (let r = 0; r < rssArray.length; r++) {
        scrapePromises.push(scrapePromiseConstructor(rssArray[r]));
      }

      function scrapePromiseConstructor(path) {
        return $http({
          method: 'GET',
          url: path
        }).then(returnData => {
          let rssPage = xmlParser.parseFromString(returnData);
          let items = rssPage.getElementById('item');

          for (let i = 0; i < items.length; i++) {
            scrapeItem(items[i]);
          }
          console.log(returnData);
        });
      }

      Promise.all(scrapePromises).then(() => {
        console.log("all done!");
      }).catch(error => {
        console.log(error);
      });

      async function scrapeItem(item) {
        $http({
          method: 'GET',
          url: '/someUrl'
        }).then(function successCallback(response) {
          for (c = 0; c < categoryObj.categories.length; c++) {
            for (s = 0; s < categoryObj.categories[c].subs.length, s++){
              for (k = 0; k < categoryObj.categories[c].subs[s].keywords.length, k++) {

              }
            }
          }
        });
      }
    }
    //     let parsedRss = xmlParser.parseFromString(rssXml, "application/xml");
  };
});
